{
    "pipes": [],
    "interfaces": [
        {
            "name": "box",
            "id": "interface-box-5c3d87db52d4cd924ebd6e7465f54d103b8fd60ae3b783df4ce9a9a801bf0dc7dd56414b91609d12ca54f52345c4685883dc675bd23748d5b86278e9f3f6cc29",
            "file": "src/app/word/word.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, HostListener} from '@angular/core';\n\nconst WIDTH = 8;\nconst HEIGHT = 8;\n\n\ninterface row {\n  column : box[];\n}\n\ninterface box{\n  text : string;\n  x: number;\n  y: number;\n  state: states;\n}\n\nenum states{\n  NOT_SELECTED,\n  SELECTED,\n  RIGHT,\n  WRONG\n}\n\n@Component({\n  selector: 'app-word',\n  templateUrl: './word.component.html',\n  styleUrls: ['./word.component.scss']\n})\n\n\nexport class WordComponent {\n\n  Grid : row[] = [];\n  CurrentWord: box[] = [];\n  Word: string = '';\n  Alphabets: string[] = ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C',\n   'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H',\n   'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'K', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'N', 'N',\n   'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'Q', 'R', 'R', 'R', 'R',\n   'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V',\n   'W', 'X', 'Y', 'Y', 'Z'];\n\n  not_selected = states.NOT_SELECTED;\n  selected = states.SELECTED;\n  right = states.RIGHT;\n  wrong = states.WRONG;\n\n  box_id : number = 0;\n\n  mouse_hold : boolean = false;\n\n  currentX: number = -1;\n  currentY: number = -1;\n  preX: number = -1;\n  preY: number = -1;\n\n  game_score: number = 0;\n  score_updated: boolean = false;\n\n  show_menu: boolean = false;\n  timer_running: boolean = false;\n\n  // fetch here.\n\n  array_length: number = 0;\n  url_const: string = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\n  final_url: string = '';\n\n  constructor() {\n    // show the main menu\n    this.show_menu = true;\n    //make the grid.\n    for(let i = 0; i < HEIGHT; i++){\n      const column : box[] = [];\n      for(let j = 0; j < WIDTH; j++){\n        let char : string = this.generate_char();\n        column.push({text : char, x : j, y : i, state: states.NOT_SELECTED});\n        this.box_id++;\n      }\n      this.Grid.push({column});\n    }\n  }\n\n  //generates random character;\n  generate_char(){\n    // let char : string = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n    let char : string = this.Alphabets[Math.floor(Math.random() * 100)];\n    return char;\n  }\n\n  // this is executed when mouse is over the letter box and click is pressed.\n  mymethod_over(x: number, y : number){\n    // console.log(x, y);\n    this.currentX = x; \n    this.currentY = y;\n    if(this.mouse_hold && this.Grid[y].column[x].state === this.not_selected){\n      const char = this.Grid[y].column[x].text;\n      this.Word += char.toLowerCase();\n      this.CurrentWord.push(this.Grid[y].column[x]);\n      this.Grid[y].column[x].state = this.selected;\n    }\n  }\n\n  // this is executed when mouse is not over the letter box or when mouse leaves the box.\n  mymethod_out(x: number, y : number){\n    this.currentX = -1; \n    this.currentY = -1;\n  }\n\n  // listen to the mouseclick is pressed.\n  @HostListener('document:mousedown', ['$event'])\n  onMouseDown(event: MouseEvent) {\n    // console.log(this.mouse_hold);\n    this.mouse_hold = true;\n    if(this.currentX != -1 || this.currentY != -1)this.mymethod_over(this.currentX, this.currentY);\n  }\n\n  // listen to when click is left.\n  @HostListener('document:mouseup', ['$event'])\n  async onMouseUp(event: MouseEvent) {\n    // lift the mouse first.\n    this.mouse_hold = false;\n\n    console.log(this.Word);\n\n    if(this.Word.length !== 0){\n      // make the url;\n      this.final_url = this.url_const + this.Word;\n      //call async http req. to set the array_length from the json data.\n      console.log('sending', this.array_length);\n\n      const url: string = this.final_url;\n      //check word from the dictonary.\n      const options = {\n        method: 'GET',\n      };\n      \n      await fetch(url, options)\n        .then(response => response.json())\n        .then((data) => {\n          console.log(data);\n          console.log(data.length);\n          this.array_length = data.length;\n        })\n        .catch(err => console.error(err));\n\n      console.log('receiving', this.array_length);\n      \n      // check it the word formed is valid or not.\n      if(this.array_length !== undefined && this.array_length !== 0){\n        for(let i = 0; i < this.CurrentWord.length; i++){\n          this.CurrentWord[i].state = this.right;\n        }\n\n        //generate new characters after 0.5sec.\n        setTimeout(() => {\n          for(let i = 0; i < this.CurrentWord.length; i++){\n            let char: string = this.generate_char();\n            this.CurrentWord[i].state = this.not_selected;\n            this.CurrentWord[i].text = char;\n          }\n          \n          //add the score.\n          this.game_score += this.CurrentWord.length * this.CurrentWord.length;\n          this.score_updated = true;\n          setTimeout(() => {\n            this.score_updated = false;\n          }, 1500);\n          console.log('score_updated', this.score_updated);\n\n\n          //reset the current word.\n          this.Word = '';\n          this.CurrentWord = [];\n          this.array_length = 0;\n        }, 500);\n      }else{\n        for(let i = 0; i < this.CurrentWord.length; i++){\n          this.CurrentWord[i].state = this.wrong;\n        }\n\n        //reset the current word.\n        setTimeout(() => {\n          for(let i = 0; i < this.CurrentWord.length; i++){\n            this.CurrentWord[i].state = this.not_selected;\n          }\n          this.Word = '';\n          this.CurrentWord = [];\n        }, 500);\n      }\n    }\n  }\n\n  //for touch screen\n  // touch_over(x: number, y: number){\n  //   console.log(x, y);\n  // }\n\n\n  // change the lenght of time bar according to time.\n  bar_length: number = 100;\n  start_time = setInterval(() => {\n    if(this.timer_running && this.bar_length !== 0) this.bar_length = Math.max(this.bar_length - (100/600), 0);  // for 1 minutes\n    \n    // implementing time here.\n    if(this.bar_length === 0){\n      this.timer_running = false;\n    }\n    if(!this.timer_running && this.bar_length === 0){\n      this.show_menu = true;\n    }\n  }, 100);\n  \n  // // after pressing start on main_menu.\n  main_menu(){\n    this.bar_length = 100;\n    this.show_menu = false;\n    this.timer_running = true;\n    this.game_score = 0; \n    // this.startTimer();\n  }\n\n  show_help_menu: boolean = false;\n\n  // pause the game for help.\n  help(){\n    this.show_help_menu = true;\n    this.timer_running = false;\n    // this.pauseTimer();\n  }\n\n  // resume the game.\n  resume(){\n    this.show_help_menu = false;\n    this.timer_running = true;\n    // this.startTimer();\n  }\n\n\n\n\n/// Does't require this section.\n\n  // time variables.\n  timer_id: any = null;\n  time: number = 10000;\n  initial_time: number = 0;\n  remaining_time: number = 1000 * 60;\n\n  // pauser the timer.\n  pauseTimer(){\n    clearTimeout(this.timer_id);\n    console.log(\"timer paused\");\n    this.timer_id = null;\n    this.remaining_time -= Date.now() - this.initial_time;\n  }\n\n  // start the timer.\n  startTimer(){\n    if(this.timer_id) {\n      return;\n    }\n\n    this.initial_time = Date.now()\n    this.timer_id = setTimeout(() => {\n      this.show_menu = true;\n      this.timer_running = false;\n      console.log(\"TimesUp\", Date.now() - this.initial_time);\n    }, this.remaining_time);\n  }\n  \n}\n",
            "properties": [
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "states",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "row",
            "id": "interface-row-5c3d87db52d4cd924ebd6e7465f54d103b8fd60ae3b783df4ce9a9a801bf0dc7dd56414b91609d12ca54f52345c4685883dc675bd23748d5b86278e9f3f6cc29",
            "file": "src/app/word/word.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, HostListener} from '@angular/core';\n\nconst WIDTH = 8;\nconst HEIGHT = 8;\n\n\ninterface row {\n  column : box[];\n}\n\ninterface box{\n  text : string;\n  x: number;\n  y: number;\n  state: states;\n}\n\nenum states{\n  NOT_SELECTED,\n  SELECTED,\n  RIGHT,\n  WRONG\n}\n\n@Component({\n  selector: 'app-word',\n  templateUrl: './word.component.html',\n  styleUrls: ['./word.component.scss']\n})\n\n\nexport class WordComponent {\n\n  Grid : row[] = [];\n  CurrentWord: box[] = [];\n  Word: string = '';\n  Alphabets: string[] = ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C',\n   'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H',\n   'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'K', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'N', 'N',\n   'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'Q', 'R', 'R', 'R', 'R',\n   'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V',\n   'W', 'X', 'Y', 'Y', 'Z'];\n\n  not_selected = states.NOT_SELECTED;\n  selected = states.SELECTED;\n  right = states.RIGHT;\n  wrong = states.WRONG;\n\n  box_id : number = 0;\n\n  mouse_hold : boolean = false;\n\n  currentX: number = -1;\n  currentY: number = -1;\n  preX: number = -1;\n  preY: number = -1;\n\n  game_score: number = 0;\n  score_updated: boolean = false;\n\n  show_menu: boolean = false;\n  timer_running: boolean = false;\n\n  // fetch here.\n\n  array_length: number = 0;\n  url_const: string = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\n  final_url: string = '';\n\n  constructor() {\n    // show the main menu\n    this.show_menu = true;\n    //make the grid.\n    for(let i = 0; i < HEIGHT; i++){\n      const column : box[] = [];\n      for(let j = 0; j < WIDTH; j++){\n        let char : string = this.generate_char();\n        column.push({text : char, x : j, y : i, state: states.NOT_SELECTED});\n        this.box_id++;\n      }\n      this.Grid.push({column});\n    }\n  }\n\n  //generates random character;\n  generate_char(){\n    // let char : string = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n    let char : string = this.Alphabets[Math.floor(Math.random() * 100)];\n    return char;\n  }\n\n  // this is executed when mouse is over the letter box and click is pressed.\n  mymethod_over(x: number, y : number){\n    // console.log(x, y);\n    this.currentX = x; \n    this.currentY = y;\n    if(this.mouse_hold && this.Grid[y].column[x].state === this.not_selected){\n      const char = this.Grid[y].column[x].text;\n      this.Word += char.toLowerCase();\n      this.CurrentWord.push(this.Grid[y].column[x]);\n      this.Grid[y].column[x].state = this.selected;\n    }\n  }\n\n  // this is executed when mouse is not over the letter box or when mouse leaves the box.\n  mymethod_out(x: number, y : number){\n    this.currentX = -1; \n    this.currentY = -1;\n  }\n\n  // listen to the mouseclick is pressed.\n  @HostListener('document:mousedown', ['$event'])\n  onMouseDown(event: MouseEvent) {\n    // console.log(this.mouse_hold);\n    this.mouse_hold = true;\n    if(this.currentX != -1 || this.currentY != -1)this.mymethod_over(this.currentX, this.currentY);\n  }\n\n  // listen to when click is left.\n  @HostListener('document:mouseup', ['$event'])\n  async onMouseUp(event: MouseEvent) {\n    // lift the mouse first.\n    this.mouse_hold = false;\n\n    console.log(this.Word);\n\n    if(this.Word.length !== 0){\n      // make the url;\n      this.final_url = this.url_const + this.Word;\n      //call async http req. to set the array_length from the json data.\n      console.log('sending', this.array_length);\n\n      const url: string = this.final_url;\n      //check word from the dictonary.\n      const options = {\n        method: 'GET',\n      };\n      \n      await fetch(url, options)\n        .then(response => response.json())\n        .then((data) => {\n          console.log(data);\n          console.log(data.length);\n          this.array_length = data.length;\n        })\n        .catch(err => console.error(err));\n\n      console.log('receiving', this.array_length);\n      \n      // check it the word formed is valid or not.\n      if(this.array_length !== undefined && this.array_length !== 0){\n        for(let i = 0; i < this.CurrentWord.length; i++){\n          this.CurrentWord[i].state = this.right;\n        }\n\n        //generate new characters after 0.5sec.\n        setTimeout(() => {\n          for(let i = 0; i < this.CurrentWord.length; i++){\n            let char: string = this.generate_char();\n            this.CurrentWord[i].state = this.not_selected;\n            this.CurrentWord[i].text = char;\n          }\n          \n          //add the score.\n          this.game_score += this.CurrentWord.length * this.CurrentWord.length;\n          this.score_updated = true;\n          setTimeout(() => {\n            this.score_updated = false;\n          }, 1500);\n          console.log('score_updated', this.score_updated);\n\n\n          //reset the current word.\n          this.Word = '';\n          this.CurrentWord = [];\n          this.array_length = 0;\n        }, 500);\n      }else{\n        for(let i = 0; i < this.CurrentWord.length; i++){\n          this.CurrentWord[i].state = this.wrong;\n        }\n\n        //reset the current word.\n        setTimeout(() => {\n          for(let i = 0; i < this.CurrentWord.length; i++){\n            this.CurrentWord[i].state = this.not_selected;\n          }\n          this.Word = '';\n          this.CurrentWord = [];\n        }, 500);\n      }\n    }\n  }\n\n  //for touch screen\n  // touch_over(x: number, y: number){\n  //   console.log(x, y);\n  // }\n\n\n  // change the lenght of time bar according to time.\n  bar_length: number = 100;\n  start_time = setInterval(() => {\n    if(this.timer_running && this.bar_length !== 0) this.bar_length = Math.max(this.bar_length - (100/600), 0);  // for 1 minutes\n    \n    // implementing time here.\n    if(this.bar_length === 0){\n      this.timer_running = false;\n    }\n    if(!this.timer_running && this.bar_length === 0){\n      this.show_menu = true;\n    }\n  }, 100);\n  \n  // // after pressing start on main_menu.\n  main_menu(){\n    this.bar_length = 100;\n    this.show_menu = false;\n    this.timer_running = true;\n    this.game_score = 0; \n    // this.startTimer();\n  }\n\n  show_help_menu: boolean = false;\n\n  // pause the game for help.\n  help(){\n    this.show_help_menu = true;\n    this.timer_running = false;\n    // this.pauseTimer();\n  }\n\n  // resume the game.\n  resume(){\n    this.show_help_menu = false;\n    this.timer_running = true;\n    // this.startTimer();\n  }\n\n\n\n\n/// Does't require this section.\n\n  // time variables.\n  timer_id: any = null;\n  time: number = 10000;\n  initial_time: number = 0;\n  remaining_time: number = 1000 * 60;\n\n  // pauser the timer.\n  pauseTimer(){\n    clearTimeout(this.timer_id);\n    console.log(\"timer paused\");\n    this.timer_id = null;\n    this.remaining_time -= Date.now() - this.initial_time;\n  }\n\n  // start the timer.\n  startTimer(){\n    if(this.timer_id) {\n      return;\n    }\n\n    this.initial_time = Date.now()\n    this.timer_id = setTimeout(() => {\n      this.show_menu = true;\n      this.timer_running = false;\n      console.log(\"TimesUp\", Date.now() - this.initial_time);\n    }, this.remaining_time);\n  }\n  \n}\n",
            "properties": [
                {
                    "name": "column",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "box[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d3b4bf03bf81b9e75ae31d285c26d1f242660cf671e4d13968371951f67a904f4588a2ae511b935f8fe2b483c6f2be6ca2f9758ba94432f13a489ce4965e9ae4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'words'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'words';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-word> </app-word>"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-afb08b3325f641773e0264ab23d725767db0e9459720f85749ae10b205cd8e25bbab9184ef0b2ba4fcfc775b026a467e309988cc376134e8240b3691f02028ec",
            "file": "src/app/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cm-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "mode",
                    "defaultValue": "new FormControl('over')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showFiller",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-cm-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  showFiller = false;\n  mode = new FormControl('over');\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-container {\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n}\n\n.example-radio-group {\n\tdisplay: block;\n\tborder: 1px solid #555;\n\tmargin: 20px;\n\tpadding: 10px;\n}",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-sidenav-container class=\"example-container\">\n\t<mat-sidenav #sidenav [mode]=\"'side'\">\n\t\t<div style=\"width: 300px;\">\n\n\t\t</div>\n\t</mat-sidenav>\n\n\t<mat-sidenav-content>\n\t\t<p><button mat-button (click)=\"sidenav.toggle()\">Toggle</button></p>\n\t\t<app-word></app-word>\n\t</mat-sidenav-content>\n</mat-sidenav-container>"
        },
        {
            "name": "WordComponent",
            "id": "component-WordComponent-5c3d87db52d4cd924ebd6e7465f54d103b8fd60ae3b783df4ce9a9a801bf0dc7dd56414b91609d12ca54f52345c4685883dc675bd23748d5b86278e9f3f6cc29",
            "file": "src/app/word/word.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-word",
            "styleUrls": [
                "./word.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./word.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Alphabets",
                    "defaultValue": "['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C',\n   'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H',\n   'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'K', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'N', 'N',\n   'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'Q', 'R', 'R', 'R', 'R',\n   'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V',\n   'W', 'X', 'Y', 'Y', 'Z']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "array_length",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "bar_length",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 202
                },
                {
                    "name": "box_id",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "CurrentWord",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "box[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "currentX",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "currentY",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "final_url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "game_score",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "Grid",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "row[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "initial_time",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 248
                },
                {
                    "name": "mouse_hold",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "not_selected",
                    "defaultValue": "states.NOT_SELECTED",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "preX",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "preY",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "remaining_time",
                    "defaultValue": "1000 * 60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 249
                },
                {
                    "name": "right",
                    "defaultValue": "states.RIGHT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "score_updated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "selected",
                    "defaultValue": "states.SELECTED",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "show_help_menu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 224
                },
                {
                    "name": "show_menu",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "start_time",
                    "defaultValue": "setInterval(() => {\n    if(this.timer_running && this.bar_length !== 0) this.bar_length = Math.max(this.bar_length - (100/600), 0);  // for 1 minutes\n    \n    // implementing time here.\n    if(this.bar_length === 0){\n      this.timer_running = false;\n    }\n    if(!this.timer_running && this.bar_length === 0){\n      this.show_menu = true;\n    }\n  }, 100)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 203
                },
                {
                    "name": "time",
                    "defaultValue": "10000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 247
                },
                {
                    "name": "timer_id",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 246
                },
                {
                    "name": "timer_running",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "url_const",
                    "defaultValue": "'https://api.dictionaryapi.dev/api/v2/entries/en/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "Word",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "wrong",
                    "defaultValue": "states.WRONG",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "generate_char",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "help",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "main_menu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mymethod_out",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mymethod_over",
                    "args": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mousedown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:mouseup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pauseTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resume",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:mousedown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113
                },
                {
                    "name": "document:mouseup",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostListener} from '@angular/core';\n\nconst WIDTH = 8;\nconst HEIGHT = 8;\n\n\ninterface row {\n  column : box[];\n}\n\ninterface box{\n  text : string;\n  x: number;\n  y: number;\n  state: states;\n}\n\nenum states{\n  NOT_SELECTED,\n  SELECTED,\n  RIGHT,\n  WRONG\n}\n\n@Component({\n  selector: 'app-word',\n  templateUrl: './word.component.html',\n  styleUrls: ['./word.component.scss']\n})\n\n\nexport class WordComponent {\n\n  Grid : row[] = [];\n  CurrentWord: box[] = [];\n  Word: string = '';\n  Alphabets: string[] = ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'B', 'B', 'C', 'C', 'C', 'C', 'C',\n   'D', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H',\n   'H', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'J', 'K', 'L', 'L', 'L', 'L', 'L', 'M', 'M', 'M', 'N', 'N',\n   'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'P', 'P', 'P', 'Q', 'R', 'R', 'R', 'R',\n   'R', 'R', 'R', 'S', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'T', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'V',\n   'W', 'X', 'Y', 'Y', 'Z'];\n\n  not_selected = states.NOT_SELECTED;\n  selected = states.SELECTED;\n  right = states.RIGHT;\n  wrong = states.WRONG;\n\n  box_id : number = 0;\n\n  mouse_hold : boolean = false;\n\n  currentX: number = -1;\n  currentY: number = -1;\n  preX: number = -1;\n  preY: number = -1;\n\n  game_score: number = 0;\n  score_updated: boolean = false;\n\n  show_menu: boolean = false;\n  timer_running: boolean = false;\n\n  // fetch here.\n\n  array_length: number = 0;\n  url_const: string = 'https://api.dictionaryapi.dev/api/v2/entries/en/';\n  final_url: string = '';\n\n  constructor() {\n    // show the main menu\n    this.show_menu = true;\n    //make the grid.\n    for(let i = 0; i < HEIGHT; i++){\n      const column : box[] = [];\n      for(let j = 0; j < WIDTH; j++){\n        let char : string = this.generate_char();\n        column.push({text : char, x : j, y : i, state: states.NOT_SELECTED});\n        this.box_id++;\n      }\n      this.Grid.push({column});\n    }\n  }\n\n  //generates random character;\n  generate_char(){\n    // let char : string = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n    let char : string = this.Alphabets[Math.floor(Math.random() * 100)];\n    return char;\n  }\n\n  // this is executed when mouse is over the letter box and click is pressed.\n  mymethod_over(x: number, y : number){\n    // console.log(x, y);\n    this.currentX = x; \n    this.currentY = y;\n    if(this.mouse_hold && this.Grid[y].column[x].state === this.not_selected){\n      const char = this.Grid[y].column[x].text;\n      this.Word += char.toLowerCase();\n      this.CurrentWord.push(this.Grid[y].column[x]);\n      this.Grid[y].column[x].state = this.selected;\n    }\n  }\n\n  // this is executed when mouse is not over the letter box or when mouse leaves the box.\n  mymethod_out(x: number, y : number){\n    this.currentX = -1; \n    this.currentY = -1;\n  }\n\n  // listen to the mouseclick is pressed.\n  @HostListener('document:mousedown', ['$event'])\n  onMouseDown(event: MouseEvent) {\n    // console.log(this.mouse_hold);\n    this.mouse_hold = true;\n    if(this.currentX != -1 || this.currentY != -1)this.mymethod_over(this.currentX, this.currentY);\n  }\n\n  // listen to when click is left.\n  @HostListener('document:mouseup', ['$event'])\n  async onMouseUp(event: MouseEvent) {\n    // lift the mouse first.\n    this.mouse_hold = false;\n\n    console.log(this.Word);\n\n    if(this.Word.length !== 0){\n      // make the url;\n      this.final_url = this.url_const + this.Word;\n      //call async http req. to set the array_length from the json data.\n      console.log('sending', this.array_length);\n\n      const url: string = this.final_url;\n      //check word from the dictonary.\n      const options = {\n        method: 'GET',\n      };\n      \n      await fetch(url, options)\n        .then(response => response.json())\n        .then((data) => {\n          console.log(data);\n          console.log(data.length);\n          this.array_length = data.length;\n        })\n        .catch(err => console.error(err));\n\n      console.log('receiving', this.array_length);\n      \n      // check it the word formed is valid or not.\n      if(this.array_length !== undefined && this.array_length !== 0){\n        for(let i = 0; i < this.CurrentWord.length; i++){\n          this.CurrentWord[i].state = this.right;\n        }\n\n        //generate new characters after 0.5sec.\n        setTimeout(() => {\n          for(let i = 0; i < this.CurrentWord.length; i++){\n            let char: string = this.generate_char();\n            this.CurrentWord[i].state = this.not_selected;\n            this.CurrentWord[i].text = char;\n          }\n          \n          //add the score.\n          this.game_score += this.CurrentWord.length * this.CurrentWord.length;\n          this.score_updated = true;\n          setTimeout(() => {\n            this.score_updated = false;\n          }, 1500);\n          console.log('score_updated', this.score_updated);\n\n\n          //reset the current word.\n          this.Word = '';\n          this.CurrentWord = [];\n          this.array_length = 0;\n        }, 500);\n      }else{\n        for(let i = 0; i < this.CurrentWord.length; i++){\n          this.CurrentWord[i].state = this.wrong;\n        }\n\n        //reset the current word.\n        setTimeout(() => {\n          for(let i = 0; i < this.CurrentWord.length; i++){\n            this.CurrentWord[i].state = this.not_selected;\n          }\n          this.Word = '';\n          this.CurrentWord = [];\n        }, 500);\n      }\n    }\n  }\n\n  //for touch screen\n  // touch_over(x: number, y: number){\n  //   console.log(x, y);\n  // }\n\n\n  // change the lenght of time bar according to time.\n  bar_length: number = 100;\n  start_time = setInterval(() => {\n    if(this.timer_running && this.bar_length !== 0) this.bar_length = Math.max(this.bar_length - (100/600), 0);  // for 1 minutes\n    \n    // implementing time here.\n    if(this.bar_length === 0){\n      this.timer_running = false;\n    }\n    if(!this.timer_running && this.bar_length === 0){\n      this.show_menu = true;\n    }\n  }, 100);\n  \n  // // after pressing start on main_menu.\n  main_menu(){\n    this.bar_length = 100;\n    this.show_menu = false;\n    this.timer_running = true;\n    this.game_score = 0; \n    // this.startTimer();\n  }\n\n  show_help_menu: boolean = false;\n\n  // pause the game for help.\n  help(){\n    this.show_help_menu = true;\n    this.timer_running = false;\n    // this.pauseTimer();\n  }\n\n  // resume the game.\n  resume(){\n    this.show_help_menu = false;\n    this.timer_running = true;\n    // this.startTimer();\n  }\n\n\n\n\n/// Does't require this section.\n\n  // time variables.\n  timer_id: any = null;\n  time: number = 10000;\n  initial_time: number = 0;\n  remaining_time: number = 1000 * 60;\n\n  // pauser the timer.\n  pauseTimer(){\n    clearTimeout(this.timer_id);\n    console.log(\"timer paused\");\n    this.timer_id = null;\n    this.remaining_time -= Date.now() - this.initial_time;\n  }\n\n  // start the timer.\n  startTimer(){\n    if(this.timer_id) {\n      return;\n    }\n\n    this.initial_time = Date.now()\n    this.timer_id = setTimeout(() => {\n      this.show_menu = true;\n      this.timer_running = false;\n      console.log(\"TimesUp\", Date.now() - this.initial_time);\n    }, this.remaining_time);\n  }\n  \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\n\theight: 98vh;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tposition: relative;\n\tborder: 2px solid #888;\n\tborder-radius: 10px;\n\n\t.title{\n\t\twidth: 100%;\n\t\theight: 54px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 24px;\n\t\tfont-weight: bold;\n\t\tborder-bottom: 1px solid #ddd;\n\t\tfont-family: 'Courier New', Courier, monospace;\n\n\t\tbutton{\n\t\t\tmargin-left: 10px;\n\t\t\tbackground-color: lightgoldenrodyellow;\n\t\t\talign-self: center;\n\t\t\tcolor: black;\n\t\t\tfont-weight: bold;\n\t\t\tfont-size: 18px;\n\t\t\tpadding: 3px 6px;\n\t\t\tborder-radius: 4px;\n\t\t\tborder: 2px solid #888;\n\t\t\tcursor: pointer;\n\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t}\n\t}\n\n\t.timer{\n\t\twidth: 100%;\n\t\theight: 5px;\n\t\tdisplay: flex;\n\t\talign-items: left;\n\t\tjustify-content: left;\n\t\tbackground-color: #888;\n\t\t// border-bottom: 1px solid #ddd;\n\t\tborder: 1px solid #888;\n\n\n\t\t.temp{\n\t\t\theight: 5px;\n\t\t\tbackground-color: lightgoldenrodyellow;\n\t\t}\n\t}\n\n\t.score{\n\t\tpadding: 10px;\n\t\theight: 54px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tfont-size: 20px;\n\t\tbox-sizing: border-box;\n\t\tborder: 2px solid #888;\n\t\tbackground-color: lightgoldenrodyellow;\n\t\tborder-radius: 10px;\n\t\tmargin-top: 30px;\n\t\tfont-family: 'Courier New', Courier, monospace;\n\t\tcolor: black;\n\t\tfont-weight: bolder;\n\t\tuser-select: none;\n\n\t\t.score-board{\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tfont-size: 20px;\n\t\t\tfont-weight: bold;\n\t\t\tuser-select: none;\n\n\t\t\t&.selected{\n\t\t\t\tanimation-name: score-pop;\n\t\t\t\tanimation-duration: 120ms;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t.main{\n\t\tflex-grow: 1;\n\t\tmargin-top: 30px;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\t\n\t\t.row-container{\n\t\t\tdisplay: flex;\n\t\t\tmargin-bottom: 8px;\n\n\t\t\t.column-container{\n\t\t\t\twidth: 6vh;\n\t\t\t\theight: 6vh;\n\t\t\t\t// width: 64px;\n\t\t\t\t// height: 64px;\n\t\t\t\tbackground-color: white;\n\t\t\t\tborder: 2px solid #ddd;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t\tmargin: 0 4px;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t\t// font-size: 32px;\n\t\t\t\tfont-size: 3.2vh;\n\t\t\t\tfont-weight: bold;\n\t\t\t\ttext-transform: uppercase;\n\t\t\t\tuser-select: none;\n\t\t\t\tborder-radius: 10px;\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\n\t\t\t\t&.selected{\n\t\t\t\t\tborder-color: #888;\n\t\t\t\t\tbackground-color: lightgoldenrodyellow;\n\t\t\t\t\tanimation-name: letter-pop;\n\t\t\t\t\tanimation-duration: 120ms;\n\t\t\t\t}\n\n\t\t\t\t&.right{\n\t\t\t\t\tborder-color: #888;\n\t\t\t\t\tbackground-color: lightgreen;\n\t\t\t\t\tanimation-name: letter-pop2;\n\t\t\t\t\tanimation-duration: 400ms;\n\t\t\t\t}\n\n\t\t\t\t&.wrong{\n\t\t\t\t\tbackground-color: lightcoral;\n\t\t\t\t\tanimation-name: shake;\n\t\t\t\t\tanimation-duration: 400ms;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\n\t.info-dialog-container{\n\t\tbackground-color: rgba(225, 225, 225, 0.5);\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\talign-items: center;\n\t\tvisibility: hidden;\n\t\tjustify-content: center;\n\t\tdisplay: flex;\n\n\t\t\t&.show{\n\t\t\t\tvisibility: visible;\n\t\t\t}\n\n\t\t\t.info-dialog{\n\t\t\t\tposition: absolute;\n\t\t\t\twidth: 300px;\n\t\t\t\theight: 300px;\n\t\t\t\t// width: 10 vh;\n\t\t\t\t// height: 10 vh;\n\t\t\t\tbackground-color: white;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t\tborder-radius: 8px; \n\t\t\t\tbox-shadow: 0 10px 25px -5px rgb(0 0 0 / 0.2), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n\t\t\t\topacity: 0;\n\t\t\t\ttransform: translateY(30px);\n\t\t\t\ttransition: all 300ms ease-out;\n\n\t\t\t\tbutton{\n\t\t\t\t\tbackground-color: lightgoldenrodyellow;\n\t\t\t\t\tcolor: black;\n\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\tpadding: 12px 24px;\n\t\t\t\t\tborder-radius: 4px;\n\t\t\t\t\tborder: 2px solid #888;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\t}\n\n\t\t\t\t&.show{\n\t\t\t\t\topacity: 1;\n\t\t\t\t\ttransform: translateY(0);\n\t\t\t\t}\n\t\t\t}\n\n\t}\n\n\t.help-container{\n\t\tbackground-color: rgba(225, 225, 225, 0.5);\n\t\tposition: absolute;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\talign-items: center;\n\t\tvisibility: hidden;\n\t\tjustify-content: center;\n\t\tdisplay: flex;\n\n\t\t&.show-help{\n\t\t\tvisibility: visible;\n\t\t}\n\n\t\t.help-box{\n\t\t\tposition: absolute;\n\t\t\twidth: 640px;\n\t\t\theight: 640px;\n\t\t\tpadding: 20px 20px;\n\t\t\tbackground-color: white;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\talign-items: center;\n\t\t\tjustify-content:flex-start;\n\t\t\tmargin-bottom: 150px;\n\t\t\tborder-radius: 8px; \n\t\t\tbox-shadow: 0 10px 25px -5px rgb(0 0 0 / 0.2), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n\t\t\topacity: 0;\n\t\t\ttransform: translateY(30px);\n\t\t\ttransition: all 300ms ease-out;\n\n\t\t\t&.show-help{\n\t\t\t\topacity: 1;\n\t\t\t\ttransform: translateY(0);\n\t\t\t}\n\n\t\t\t.text{\n\t\t\t\tfont-size: 20px;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t\talign-self: center;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t.images{\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: row;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\n\t\t\t\timg{\n\t\t\t\t\theight: 300px;\n\t\t\t\t\twidth: 300px;\n\t\t\t\t\tmargin: 10px 10px;\n\t\t\t\t\tborder: 2px solid #888;\n\t\t\t\t\tborder-radius: 8px;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbutton{\n\t\t\t\tmargin-top: 50px;\n\t\t\t\tbackground-color: lightgoldenrodyellow;\n\t\t\t\tcolor: black;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tfont-size: 18px;\n\t\t\t\tpadding: 12px 24px;\n\t\t\t\tborder-radius: 4px;\n\t\t\t\tborder: 2px solid #888;\n\t\t\t\tcursor: pointer;\n\t\t\t\tfont-family: 'Courier New', Courier, monospace;\n\t\t\t}\n\t\t}\n\n\t}\n\t.self{\n\t\tbackground-color: lightgoldenrodyellow;\n\t\tborder: 2px solid #888;\n\t\tborder-radius: 10px;\n\t\talign-self: flex-end;\n\t\tmargin-right: 5px;\n\t\tmargin-bottom: 5px;\n\t\tpadding-left: 12px;\n\t\tpadding-right: 12px;\n\t\tfont-size: 14px;\n\t\tfont-weight: bold;\n\t\tfont-family: 'Courier New', Courier, monospace;\n\t\tuser-select: none;\n\t}\n}\n\n@keyframes score-pop {\n\t0% {transform: scale(1); }\n\t50% {transform: scale(1.5); }\n\t100% {transform: scale(1); }\n}\n\n@keyframes letter-pop {\n\t0% {transform: scale(1); }\n\t50% {transform: scale(1.15); }\n\t100% {transform: scale(1); }\n}\n\n@keyframes letter-pop2 {\n\t0% {transform: scale(1); }\n\t50% {transform: scale(1.15); }\n\t100% {transform: scale(1); }\n}\n\n@keyframes letter-pop3 {\n\t0% {transform: scale(1); }\n\t50% {transform: scale(1.15); }\n\t100% {transform: scale(1); }\n}\n\n@keyframes shake {\n\t10%,\n\t90% {\n\t\ttransform : translateX(-1px);\n\t}\n\n\t20%,\n\t80% {\n\t\ttransform : translateX(2px);\n\t}\n\n\t30%,\n\t50%,\n\t70% {\n\t\ttransform : translateX(-4px);\n\t}\n\n\t40%,\n\t60% {\n\t\ttransform : translateX(4px);\n\t}\n}",
                    "styleUrl": "./word.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 68
            },
            "templateData": "<div class=\"container\">\n\t<div class=\"title\">\n\t\tWord Game  \n\t\t<button (click) = \"help()\"> ?\n\t\t\t\n\t\t</button>\n\t</div>\n\n\t<div id=\"time\" class =\"timer\">\n\t\t<div class=\"temp\" style =\"width: {{bar_length}}%\"> </div> \n\t</div>\n\n\t<div class=\"score\"> Score: \n\t\t<div class = \"score-board\" [class.selected] = \"score_updated\"> {{ game_score }} </div>\n\t</div>\n\n\t<div class=\"main\" >\n\t\t<div class=\"row-container\" *ngFor = \"let row of Grid\" #tryContainer >\n\t\t\t<div class=\"column-container\" *ngFor = \"let box of row.column\" id =\"id\" (mouseover) = \"mymethod_over(box.x, box.y)\" (mouseout) = \"mymethod_out(box.x, box.y)\" \n\t\t\t[class.selected] = \"box.state == selected\" [class.right] = \"box.state == right\" [class.wrong] = \"box.state == wrong\">\n\t\t\t\t{{box.text}}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<div class=\"info-dialog-container\" [class.show] = \"show_menu\">\n\t\t<div class=\"info-dialog\" [class.show] = \"show_menu\">\n\t\t\t<button (click) = \"main_menu()\"> Start </button>\n\t\t</div>\n\t</div> \n\n\t<div class=\"self\"> <p class = \"text\"> Made by Gagan</p></div>\n\n\t<div class =\"help-container\" [class.show-help] = \"show_help_menu\">\n\t\t<div class=\"help-box\" [class.show-help] = \"show_help_menu\">\n\t\t\t<p class = \"text\"> * Make a valid word of any length without lifting your mouse.\n\t\t\t\t<br><br>\n\t\t\t\t* Time Limit: 1 minute.\n\t\t\t</p> \n\t\t\t<div class = \"images\" >\n\t\t\t\t<img src = assets\\images\\img1.png>\n\t\t\t\t<img src = assets\\images\\img2.png>\n\t\t\t</div>\n\t\t\t<button (click) = \"resume()\">\n\t\t\t\tResume\n\t\t\t</button>\n\t\t</div>\n\t</div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-5179900355bbe060be2e1ec430adda622d9c502687158f35da62f80e54dc96011b9e8988e491eda065acc0049c45c629027caffa168297c23737a29e1c8fcf36",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { DashboardComponent } from './dashboard/dashboard.component';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { WordComponent } from './word/word.component';\n\n\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { APP_BASE_HREF, CommonModule } from '@angular/common';\n// Material Form Controls\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n// Material Navigation\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n// Material Layout\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatListModule } from '@angular/material/list';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTreeModule } from '@angular/material/tree';\n// Material Buttons & Indicators\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRippleModule } from '@angular/material/core';\n// Material Popups & Modals\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n// Material Data tables\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\n@NgModule({\n  declarations: [\n    AppComponent,\n    WordComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatSidenavModule,\n    CommonModule,\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatListModule,\n    MatStepperModule,\n    MatTabsModule,\n    MatTreeModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatBadgeModule,\n    MatChipsModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatRippleModule,\n    MatBottomSheetModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    MatTooltipModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatTableModule\n  ],\n  providers: [{ provide: APP_BASE_HREF, useValue: '/' }],\n  bootstrap: [AppComponent],\n  exports: [DashboardComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "WordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Dashboard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/dashboard.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/word/word.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "8"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/dashboard.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: DashboardComponent) => ({\n\tprops: args,\n\tcomponet: DashboardComponent,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/words.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(args: WordComponent) => ({\n\tprops: args,\n\tcomponet: WordComponent,\n})"
            },
            {
                "name": "WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/word/word.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "8"
            },
            {
                "name": "Words",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/words.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "states",
                "childs": [
                    {
                        "name": "NOT_SELECTED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "SELECTED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RIGHT",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "WRONG",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/word/word.component.ts"
            }
        ],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/dashboard.stories.ts": [
                {
                    "name": "Dashboard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/dashboard.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/dashboard.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: DashboardComponent) => ({\n\tprops: args,\n\tcomponet: DashboardComponent,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/word/word.component.ts": [
                {
                    "name": "HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/word/word.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "8"
                },
                {
                    "name": "WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/word/word.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "8"
                }
            ],
            "src/stories/words.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/words.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(args: WordComponent) => ({\n\tprops: args,\n\tcomponet: WordComponent,\n})"
                },
                {
                    "name": "Words",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/words.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/word/word.component.ts": [
                {
                    "name": "states",
                    "childs": [
                        {
                            "name": "NOT_SELECTED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "SELECTED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RIGHT",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "WRONG",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/word/word.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "box",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "row",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/word/word.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/dashboard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dashboard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/dashboard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/words.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/words.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Words",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}